// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	//check instruction type (instruction[15] = 1 <=> cInstruction, aInstruction otherwise).
	Xor(a = instruction[15], b = true, out = aInstruction);
	Not(in = aInstruction, out = cInstruction);
	
	//We now need to check, whether we have 1. c instruction A = [some address] 
	//and i mark it as cAinstruction, or 2. A instruction.
	//both cases we need to move to the address.
	//if its the case, instruction[5] = 1 and instruction[15] = 1
	
	//A instruction
	And(a = cInstruction, b = instruction[5], out = cAinstruction);
	Or(a = cAinstruction, b =  aInstruction, out = moveToA);
	//So moveToA is now the loader for the ARegister chip
	//We still need to mux the results with the ALUOutput, depending if its C - A instruction
	Mux16(a = instruction, b = ALUOutput, sel = cAinstruction, out = register); 
	//And now set the ARegister with the loader
	ARegister(in = register, load = moveToA, out = Areg);
	
	//a OR m instruction
	Mux16(a = Areg, b = inM, sel = instruction[12], out = AORM); 
	
	//D instruction
	And(a = cInstruction, b = instruction[4], out = Dload);
	DRegister(in = ALUOutput, load = Dload, out = Dout);
	
	//We gathered all inputs for ALU, now we can feed them and collect outputs
	ALU(x = Dout, y = AORM, zx = instruction[11], nx = instruction[10],
	zy = instruction[9] , ny = instruction[8], f = instruction[7],
	no = instruction[6], out = ALUOutput, zr = ALUZR, ng = ALUNG);
    
	//set outputs
	And16(a = true, b = Areg, out[0..14] = addressM); //If A instruction (or cA instruction), set address
	And16(a = true, b = ALUOutput, out = outM);       
	And(a = cInstruction, b = instruction[3], out = writeM); //set write to M if instruction
	
	//manage instructions jumps (if cInstruction)
	And(a = ALUZR, b = instruction[1], out = jeq); //set jeq if Alu Zero and instruction[1]
	And(a = ALUNG, b = instruction[2], out = jng); //set jng if Alu Neg and instruction[2]
	Or(a = ALUZR, b = ALUNG, out = negOrZero);    // check if ALU out was less or neg
	Not(in = negOrZero, out = positive);         // negate it and know if positive
	And(a = positive, b = instruction[0], out = jgt); // set jgt 
	Or(a = jeq, b = jng, out = temp);  //Now just check whether any jump is needed
	Or(a = temp, b = jgt, out = Ajump);
	
	//manage PC chip 
	And(a = cInstruction, b = Ajump, out = loadPC); //Only if cInstruction PC will execute 
	Not(in = loadPC, out = incPC); //incPC is always the opposite of loader for PC
	PC(in = Areg, load = loadPC, inc = incPC, reset = reset, out[0..14] = pc); //execute PC chip
}