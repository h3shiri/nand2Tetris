/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
     //check instruction type (instruction[15] = 1 <=> cInstruction, aInstruction otherwise).
	Xor(a = instruction[15], b = true, out = aInstruction);
	Not(in = aInstruction, out = cInstruction);
	
	//We now need to check, whether we have 1. c instruction A = [some address] 
	//and i mark it as cAinstruction, or 2. A instruction.
	//both cases we need to move to the address.
	//if its the case, instruction[5] = 1 and instruction[15] = 1
	
	//A instruction
	And(a = cInstruction, b = instruction[5], out = cAinstruction);
	Or(a = cAinstruction, b =  aInstruction, out = moveToA);
	//So moveToA is now the loader for the ARegister chip
	//We still need to mux the results with the ALUOutput, depending if its C - A instruction
	Mux16(a = instruction, b = ALUOutput, sel = cAinstruction, out = register); 
	//And now set the ARegister with the loader
	ARegister(in = register, load = moveToA, out = Areg);
	
	//a OR m instruction
	Mux16(a = Areg, b = inM, sel = instruction[12], out = AORM); 
	
	//D instruction
	And(a = cInstruction, b = instruction[4], out = Dload);
	DRegister(in = ALUOutput, load = Dload, out = Dout);
	
	//We gathered all inputs for ALU, now we can feed them and collect outputs
	ExtendAlu(x = Dout, y = AORM, instruction = instruction[6..14], out = ALUOutput, zr = ALUZR, ng = ALUNG);
    
	//set outputs
	And16(a = true, b = Areg, out[0..14] = addressM); //If A instruction (or cA instruction), set address
	And16(a = true, b = ALUOutput, out = outM);       
	And(a = cInstruction, b = instruction[3], out = writeM); //set write to M if instruction
	
	//manage instructions jumps (if cInstruction)
	And(a = ALUZR, b = instruction[1], out = jeq); //set jeq if Alu Zero and instruction[1]
	And(a = ALUNG, b = instruction[2], out = jng); //set jng if Alu Neg and instruction[2]
	Or(a = ALUZR, b = ALUNG, out = negOrZero);    // check if ALU out was less or neg
	Not(in = negOrZero, out = positive);         // negate it and know if positive
	And(a = positive, b = instruction[0], out = jgt); // set jgt 
	Or(a = jeq, b = jng, out = temp);  //Now just check whether any jump is needed
	Or(a = temp, b = jgt, out = Ajump);
	
	//manage PC chip 
	And(a = cInstruction, b = Ajump, out = loadPC); //Only if cInstruction PC will execute 
	Not(in = loadPC, out = incPC); //incPC is always the opposite of loader for PC
	PC(in = Areg, load = loadPC, inc = incPC, reset = reset, out[0..14] = pc); //execute PC chip
}