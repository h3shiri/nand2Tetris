// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	// Dmux the input according to the load and use the address last 2 bits as selector
<<<<<<< HEAD
    DMux4Way(in = load, sel = address[13..14], a = load1, b = load2, c = sc, d = kb);
=======
    	DMux4Way(in = load, sel = address[13..14], a = load1, b = load2, c = sc, d = kb);
>>>>>>> refs/remotes/origin/master
	
	//We actually divided the ram to 2 8k parts, so we or between them
	Or(a = load1, b = load2, out = ram);
	
	//Now for each part of our memory, we will select its relevant output
	//Since Ram needs 14 bit address as input,  we give address 1..14.
	RAM16K(in = in, load = ram, address = address[0..13], out = ramoutput);
	
	//Same with screen, but needs 13 bit input (according to the screen built in chip).
	Screen(in = in, load = sc, address = address[0..12], out = scoutput);
	
	//Nothing to choose in keyboard, only one register
	Keyboard(out = kboutput);
	
	//Now we simply select which of the components is actually relevant and output it.
	Mux4Way16(a = ramoutput, b = ramoutput, c = scoutput, d = kboutput, sel = address[13..14], out = out);
	
<<<<<<< HEAD
}
=======
}
>>>>>>> refs/remotes/origin/master
