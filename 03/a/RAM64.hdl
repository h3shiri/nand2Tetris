// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
// Now we create 8 ram8's , and use address 0..2 which represents // the address of each one (we select twice, once for each ram8 // and then 1 from within the chosen 8 (in the mux logic down in // this code)

Ram8(in = in, load = l1, address = address[0..2], out = ram1);
Ram8(in = in, load = l2, address = address[0..2], out = ram2);
Ram8(in = in, load = l3, address = address[0..2], out = ram3);
Ram8(in = in, load = l4, address = address[0..2], out = ram4);
Ram8(in = in, load = l5, address = address[0..2], out = ram5);
Ram8(in = in, load = l6, address = address[0..2], out = ram6);
Ram8(in = in, load = l7, address = address[0..2], out = ram7);
Ram8(in = in, load = l8, address = address[0..2], out = ram8);

//Read

Mux8Way16(a = ram1, b = ram2, c = ram3, d = ram4, e = ram5, f = ram6, g = ram7, h = ram8, sel = address[3..5], out = out);

//Write

DMux8Way16(in = load, a = l1, b = l2, c = l3, d = l4, e = l5, f = l6, g = l7, h = l8, sel = address[3..5]);
}